classDiagram
    class MainApplication {
        -Stage primaryStage
        +start(Stage stage)
        -initializeUI()
    }
    
    class UIController {
        -DashboardView dashboard
        -MonitoringView monitoring
        +initialize()
        +updateViews()
    }
    
 class ElasticsearchService {
        -ElasticsearchClientSingleton esClientSingleton
        +searchLogsFromLastMinute(): String
        +close(): void
    }

    class ElasticsearchClientSingleton {
        -static ElasticsearchClientSingleton instance
        -ElasticsearchClient client
        -RestClient restClient
        +getInstance(): ElasticsearchClientSingleton
        +getClient(): ElasticsearchClient
        +executeSearchRequest(String endpoint, String jsonQuery): String
        +close(): void
    }
    
    class PretrainedModelService {
        - String DetectionModelScript
        - ObjectMapper objectMapper
        - Class PythonPredictionResult
        +loadModel()
        +predictAnomaly(LogData log)
        +batchPredict(List~LogData~ logs)
    }
    


    class AlertManager {
        -List~AlertObserver~ observers
        +attach(AlertObserver observer)
        +detach(AlertObserver observer)
        +notifyObservers(Alert alert)
        +createAlert(AnomalyResult anomaly)
    }

    class AlertObserver {
        <<interface>>
        +update(Alert alert)
    }

    class DashboardView {
        -Charts charts
        -AnomalyTable anomalyTable
        +updateVisualizations()
        +displayAlerts()
        +update(Alert alert)
    }

    class EmailAlertObserver {
        -EmailService emailService
        +update(Alert alert)
        -sendEmailAlert(Alert alert)
    }

    class Alert {
        -AnomalyResult anomaly
        -String severity
        -LocalDateTime timestamp
        -String description
        +getDetails()
    }

    class AnomalyDetectionService {
        -PretrainedModelService modelService
        -ElasticsearchService esService
        -AlertManager alertManager
        +detectAnomalies(TimeRange range)
        +processNewLogs()
        +getAnomalyStats()
    }

    class LogEntry {
        -String sourceIp
        -String destIp
        -int sourcePort
        -int destPort
        -long bytes
        -String direction
    }
    
    class AnomalyResult {
        -LogEntry logEntry
        -boolean isAnomaly
        -double anomalyScore
        -LocalDateTime timestamp
    }

    MainApplication --> UIController
    UIController --> DashboardView
    UIController --> AnomalyDetectionService
    AnomalyDetectionService --> ElasticsearchService
    ElasticsearchService --> ElasticsearchClientSingleton
    AnomalyDetectionService --> PretrainedModelService
    AnomalyDetectionService --> AlertManager
    AlertManager --> "0..*" AlertObserver
    DashboardView ..|> AlertObserver
    EmailAlertObserver ..|> AlertObserver
    AlertManager --> Alert
    Alert --> AnomalyResult
    DashboardView ..> AnomalyResult
    AnomalyResult --> LogEntry

